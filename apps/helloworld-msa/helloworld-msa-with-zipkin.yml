---
apiVersion: "v1"
kind: "Template"
metadata:
  name: "helloworld-msa-with-zipkin"
  annotations:
    description: "The Red Hat HelloWorld MSA (Microservice Architecture) (with ZipKin)."
objects:
- apiVersion: "v1"
  kind: "ServiceAccount"
  metadata:
    name: "turbine"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "turbine-server"
    name: "turbine-server"
  spec:
    replicas: "1"
    selector:
      app: "turbine-server"
      deploymentconfig: "turbine-server"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "turbine-server"
          deploymentconfig: "turbine-server"
      spec:
        containers:
        - name: "turbine-server"
          image: "docker.io/metmajer/turbine-server:1.0.26.1"
          env:
          - name: "KUBERNETES_MASTER"
            value: "https://${OS_PUBLIC_HOSTNAME}:8443"
          - name: "KUBERNETES_NAMESPACE"
            valueFrom:
              fieldRef:
                fieldPath: "metadata.namespace"
          ports:
          - containerPort: 9779
            protocol: "TCP"
          - containerPort: 8080
            protocol: "TCP"
          - containerPort: 8778
            protocol: "TCP"
          resources: {}
        serviceAccountName: "turbine"
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "turbine-server"
    name: "turbine-server"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    - name: "8778-tcp"
      port: 8778
      protocol: "TCP"
      targetPort: 8778
    - name: "9779-tcp"
      port: 9779
      protocol: "TCP"
      targetPort: 9779
    selector:
      app: "turbine-server"
      deploymentconfig: "turbine-server"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "turbine-server"
  spec:
    port:
      targetPort: 8080
    to:
      kind: "Service"
      name: "turbine-server"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "hystrix-dashboard"
    name: "hystrix-dashboard"
  spec:
    replicas: "1"
    selector:
      app: "hystrix-dashboard"
      deploymentconfig: "hystrix-dashboard"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "hystrix-dashboard"
          deploymentconfig: "hystrix-dashboard"
      spec:
        containers:
        - name: "hystrix-dashboard"
          image: "docker.io/metmajer/hystrix-dashboard:1.0.26.1"
          ports:
          - containerPort: 8080
            protocol: "TCP"
          - containerPort: 8778
            protocol: "TCP"
          - containerPort: 9779
            protocol: "TCP"
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "hystrix-dashboard"
    name: "hystrix-dashboard"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    - name: "8778-tcp"
      port: 8778
      protocol: "TCP"
      targetPort: 8778
    - name: "9779-tcp"
      port: 9779
      protocol: "TCP"
      targetPort: 9779
    selector:
      app: "hystrix-dashboard"
      deploymentconfig: "hystrix-dashboard"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "hystrix-dashboard"
  spec:
    port:
      targetPort: 8080
    to:
      kind: "Service"
      name: "hystrix-dashboard"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      project: "zipkin"
    name: "zipkin"
  spec:
    replicas: "1"
    selector:
      app: "zipkin"
      deploymentconfig: "zipkin"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "zipkin"
          deploymentconfig: "zipkin"
      spec:
        containers:
        - name: "zipkin"
          image: "docker.io/openzipkin/zipkin:1.20"
          env:
          - name: "STORAGE_PORT_9042_TCP_ADDR"
            value: "zipkin-cassandra:9411"
          - name: "STORAGE_PORT_3306_TCP_ADDR"
            value: "zipkin-mysql:3306"
          - name: "STORAGE_TYPE"
            value: "mysql"
          - name: "TRANSPORT_TYPE"
            value: "http"
          - name: "KUBERNETES_NAMESPACE"
            valueFrom:
              fieldRef:
                fieldPath: "metadata.namespace"
          readinessProbe:
            httpGet:
              path: "/api/v1/services"
              port: 9411
            initialDelaySeconds: 5
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "zipkin"
    name: "zipkin"
  spec:
    ports:
    - port: 9411
      protocol: "TCP"
      targetPort: 9411
    selector:
      app: "zipkin"
      deploymentconfig: "zipkin"
- apiVersion: "v1"
  kind: "Route"
  metadata:
    labels:
      app: "zipkin"
    name: "zipkin"
  spec:
    port:
      targetPort: 9411
    to:
      kind: "Service"
      name: "zipkin"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "zipkin-mysql"
    name: "zipkin-mysql"
  spec:
    replicas: "1"
    selector:
      app: "zipkin-mysql"
      deploymentconfig: "zipkin-mysql"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "zipkin-mysql"
          deploymentconfig: "zipkin-mysql"
      spec:
        containers:
        - name: "zipkin-mysql"
          image: "docker.io/mysql:5.7"
          env:
          - name: "MYSQL_USER"
            value: "zipkin"
          - name: "MYSQL_PASSWORD"
            value: "zipkin"
          - name: "MYSQL_ROOT_PASSWORD"
            value: "zipkin"
          - name: "MYSQL_DATABASE"
            value: "zipkin"
          - name: "KUBERNETES_NAMESPACE"
            valueFrom:
              fieldRef:
                fieldPath: "metadata.namespace"
          readinessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: 3306
          volumeMounts:
#          - mountPath: "/var/lib/mysql"
#            name: "mysql-data"
          - mountPath: "/docker-entrypoint-initdb.d/"
            name: "mysql-init-script"
          - mountPath: "/etc/mysql/conf.d/"
            name: "mysql-confd"
        volumes:
#        - name: "mysql-data"
#          persistentVolumeClaim:
#            claimName: "mysql-data"
        - name: "mysql-init-script"
          configMap:
            name: "zipkin-mysql-initdb"
        - name: "mysql-confd"
          configMap:
            name: "zipkin-mysql-cnf"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "zipkin-mysql"
    name: "zipkin-mysql"
  spec:
    ports:
    - port: 3306
      protocol: "TCP"
      targetPort: 3306
    selector:
      app: "zipkin-mysql"
#- apiVersion: "v1"
#  kind: "PersistentVolumeClaim"
#  metadata:
#    labels:
#      app: "zipkin-mysql"
#    name: "mysql-data"
#  spec:
#    accessModes:
#    - "ReadWriteOnce"
 #   resources:
#      requests:
#        storage: "100Mi"
#    volumeName: "mysql-data"
- apiVersion: "v1"
  kind: "ConfigMap"
  metadata:
    labels:
      app: "zipkin-mysql"
    name: "zipkin-mysql-cnf"
  data:
    custom.cnf: "[mysqld]\nsql-mode=\"\"\n"
- apiVersion: "v1"
  kind: "ConfigMap"
  metadata:
    labels:
      app: "zipkin-mysql"
    name: "zipkin-mysql-initdb"
  data:
    init.sql: "CREATE TABLE IF NOT EXISTS zipkin_spans (\n  `trace_id` BIGINT NOT\
      \ NULL,\n  `id` BIGINT NOT NULL,\n  `name` VARCHAR(255) NOT NULL,\n  `parent_id`\
      \ BIGINT,\n  `debug` BIT(1),\n  `start_ts` BIGINT COMMENT 'Span.timestamp():\
      \ epoch micros used for endTs query and to implement TTL',\n  `duration` BIGINT\
      \ COMMENT 'Span.duration(): micros used for minDuration and maxDuration query'\n\
      ) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;\n\nALTER TABLE zipkin_spans ADD UNIQUE\
      \ KEY(`trace_id`, `id`) COMMENT 'ignore insert on duplicate';\nALTER TABLE zipkin_spans\
      \ ADD INDEX(`trace_id`, `id`) COMMENT 'for joining with zipkin_annotations';\n\
      ALTER TABLE zipkin_spans ADD INDEX(`trace_id`) COMMENT 'for getTracesByIds';\n\
      ALTER TABLE zipkin_spans ADD INDEX(`name`) COMMENT 'for getTraces and getSpanNames';\n\
      ALTER TABLE zipkin_spans ADD INDEX(`start_ts`) COMMENT 'for getTraces ordering\
      \ and range';\n\nCREATE TABLE IF NOT EXISTS zipkin_annotations (\n  `trace_id`\
      \ BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.trace_id',\n  `span_id`\
      \ BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.id',\n  `a_key` VARCHAR(255)\
      \ NOT NULL COMMENT 'BinaryAnnotation.key or Annotation.value if type == -1',\n\
      \  `a_value` BLOB COMMENT 'BinaryAnnotation.value(), which must be smaller than\
      \ 64KB',\n  `a_type` INT NOT NULL COMMENT 'BinaryAnnotation.type() or -1 if\
      \ Annotation',\n  `a_timestamp` BIGINT COMMENT 'Used to implement TTL; Annotation.timestamp\
      \ or zipkin_spans.timestamp',\n  `endpoint_ipv4` INT COMMENT 'Null when Binary/Annotation.endpoint\
      \ is null',\n  `endpoint_ipv6` BINARY(16) COMMENT 'Null when Binary/Annotation.endpoint\
      \ is null, or no IPv6 address',\n  `endpoint_port` SMALLINT COMMENT 'Null when\
      \ Binary/Annotation.endpoint is null',\n  `endpoint_service_name` VARCHAR(255)\
      \ COMMENT 'Null when Binary/Annotation.endpoint is null'\n) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;\n\
      \nALTER TABLE zipkin_annotations ADD UNIQUE KEY(`trace_id`, `span_id`, `a_key`,\
      \ `a_timestamp`) COMMENT 'Ignore insert on duplicate';\nALTER TABLE zipkin_annotations\
      \ ADD INDEX(`trace_id`, `span_id`) COMMENT 'for joining with zipkin_spans';\n\
      ALTER TABLE zipkin_annotations ADD INDEX(`trace_id`) COMMENT 'for getTraces/ByIds';\n\
      ALTER TABLE zipkin_annotations ADD INDEX(`endpoint_service_name`) COMMENT 'for\
      \ getTraces and getServiceNames';\nALTER TABLE zipkin_annotations ADD INDEX(`a_type`)\
      \ COMMENT 'for getTraces';\nALTER TABLE zipkin_annotations ADD INDEX(`a_key`)\
      \ COMMENT 'for getTraces';\n\nCREATE TABLE IF NOT EXISTS zipkin_dependencies\
      \ (\n  `day` DATE NOT NULL,\n  `parent` VARCHAR(255) NOT NULL,\n  `child` VARCHAR(255)\
      \ NOT NULL,\n  `call_count` BIGINT\n) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;\n\
      \nALTER TABLE zipkin_dependencies ADD UNIQUE KEY(`day`, `parent`, `child`);\n\
      GRANT SELECT, INSERT, UPDATE, DELETE ON zipkin.* TO zipkin@'%' IDENTIFIED BY\
      \ 'zipkin' WITH GRANT OPTION ;\nFLUSH PRIVILEGES;\n"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "frontend"
      hystrix.enabled: "true"
    name: "frontend"
  spec:
    replicas: "1"
    selector:
      app: "frontend"
      deploymentconfig: "frontend"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "frontend"
          hystrix.enabled: "true"
          deploymentconfig: "frontend"
      spec:
        containers:
        - name: "frontend"
          image: "docker.io/metmajer/msa-frontend"
          env:
          - name: "APIGATEWAYURL"
            value: "http://api-gateway-${OS_PROJECT}.${OS_MASTER_IP}.xip.io/api"
          - name: "ALOHAURL"
            value: "http://aloha-${OS_PROJECT}.${OS_MASTER_IP}.xip.io/api/aloha"
          - name: "ALOHCHAINAURL"
            value: "http://aloha-${OS_PROJECT}.${OS_MASTER_IP}.xip.io/api/aloha-chaining"
          - name: "BONJOURCHAINURL"
            value: "http://bonjour-${OS_PROJECT}.${OS_MASTER_IP}.xip.io/api/bonjour-chaining"
          - name: "BONJOURURL"
            value: "http://bonjour-${OS_PROJECT}.${OS_MASTER_IP}.xip.io/api/bonjour"
          - name: "HOLAURL"
            value: "http://hola-${OS_PROJECT}.${OS_MASTER_IP}.xip.io/api/hola"
          - name: "HOLACHAINURL"
            value: "http://hola-${OS_PROJECT}.${OS_MASTER_IP}.xip.io/api/hola-chaining"
          - name: "OLAURL"
            value: "http://ola-${OS_PROJECT}.${OS_MASTER_IP}.xip.io/api/ola"
          - name: "OLACHAINURL"
            value: "http://ola-${OS_PROJECT}.${OS_MASTER_IP}.xip.io/api/ola-chaining"
          - name: "ENABLE_HYSTRIX"
            value: "true"
          - name: "HYSTRIXDASHBOARDURL"
            value: "http://hystrix-dashboard-${OS_PROJECT}.${OS_MASTER_IP}.xip.io"
          - name: "TURBINESERVERURL"
            value: "http://turbine-server-${OS_PROJECT}.${OS_MASTER_IP}.xip.io"
          - name: "ENABLE_ZIPKIN"
            value: "true"
          - name: "ZIPKINQUERYURL"
            value: "http://zipkin-${OS_PROJECT}.${OS_MASTER_IP}.xip.io"
          ports:
          - containerPort: 8080
            protocol: "TCP"
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "frontend"
      hystrix.enabled: "true"
    name: "frontend"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    selector:
      app: "frontend"
      deploymentconfig: "frontend"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "frontend"
  spec:
    to:
      kind: "Service"
      name: "frontend"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "api-gateway"
      hystrix.enabled: "true"
    name: "api-gateway"
  spec:
    replicas: "1"
    selector:
      app: "api-gateway"
      deploymentconfig: "api-gateway"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "api-gateway"
          deploymentconfig: "api-gateway"
          hystrix.enabled: "true"
      spec:
        containers:
        - name: "api-gateway"
          image: "docker.io/metmajer/msa-api-gateway"
          env:
          - name: "AB_ENABLED"
            value: "jolokia"
          - name: "ZIPKIN_SERVER_URL"
            value: "http://zipkin-${OS_PROJECT}.${OS_MASTER_IP}.xip.io"
          ports:
          - containerPort: 9779
            protocol: "TCP"
          - containerPort: 8080
            protocol: "TCP"
          - containerPort: 8778
            protocol: "TCP"
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "api-gateway"
      hystrix.enabled: "true"
    name: "api-gateway"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    - name: "8778-tcp"
      port: 8778
      protocol: "TCP"
      targetPort: 8778
    - name: "9779-tcp"
      port: 9779
      protocol: "TCP"
      targetPort: 9779
    selector:
      app: "api-gateway"
      deploymentconfig: "api-gateway"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "api-gateway"
  spec:
    port:
      targetPort: 8080
    to:
      kind: "Service"
      name: "api-gateway"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "aloha"
      hystrix.enabled: "true"
    name: "aloha"
  spec:
    replicas: "1"
    selector:
      app: "aloha"
      deploymentconfig: "aloha"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "aloha"
          deploymentconfig: "aloha"
          hystrix.enabled: "true"
      spec:
        containers:
        - name: "aloha"
          image: "docker.io/metmajer/msa-aloha"
          env:
          - name: "AB_ENABLED"
            value: "jolokia"
          - name: "ZIPKIN_SERVER_URL"
            value: "http://zipkin-${OS_PROJECT}.${OS_MASTER_IP}.xip.io"
          ports:
          - containerPort: 8080
            protocol: "TCP"
          - containerPort: 8778
            protocol: "TCP"
          - containerPort: 9779
            protocol: "TCP"
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "aloha"
      hystrix.enabled: "true"
    name: "aloha"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    - name: "8778-tcp"
      port: 8778
      protocol: "TCP"
      targetPort: 8778
    - name: "9779-tcp"
      port: 9779
      protocol: "TCP"
      targetPort: 9779
    selector:
      app: "aloha"
      deploymentconfig: "aloha"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "aloha"
  spec:
    port:
      targetPort: 8080
    to:
      kind: "Service"
      name: "aloha"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "bonjour"
      hystrix.enabled: "true"
    name: "bonjour"
  spec:
    replicas: "1"
    selector:
      app: "bonjour"
      deploymentconfig: "bonjour"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "bonjour"
          deploymentconfig: "bonjour"
          hystrix.enabled: "true"
      spec:
        containers:
        - name: "bonjour"
          image: "docker.io/metmajer/msa-bonjour"
          env:
          - name: "ZIPKIN_SERVER_URL"
            value: "http://zipkin-${OS_PROJECT}.${OS_MASTER_IP}.xip.io"
          ports:
          - containerPort: 8080
            protocol: "TCP"
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "bonjour"
      hystrix.enabled: "true"
    name: "bonjour"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    selector:
      app: "bonjour"
      deploymentconfig: "bonjour"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "bonjour"
  spec:
    to:
      kind: "Service"
      name: "bonjour"
- apiVersion: v1
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "hola"
      hystrix.enabled: "true"
    name: "hola"
  spec:
    replicas: "1"
    selector:
      app: "hola"
      deploymentconfig: "hola"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "hola"
          deploymentconfig: "hola"
          hystrix.enabled: "true"
      spec:
        containers:
        - name: "hola"
          image: "docker.io/metmajer/msa-hola"
          env:
          - name: "ZIPKIN_SERVER_URL"
            value: "http://zipkin-${OS_PROJECT}.${OS_MASTER_IP}.xip.io"
          ports:
          - containerPort: 9779
            protocol: "TCP"
          - containerPort: 8080
            protocol: "TCP"
          - containerPort: 8778
            protocol: "TCP"
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "hola"
      hystrix.enabled: "true"
    name: "hola"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    - name: "8778-tcp"
      port: 8778
      protocol: "TCP"
      targetPort: 8778
    - name: "9779-tcp"
      port: 9779
      protocol: "TCP"
      targetPort: 9779
    selector:
      app: "hola"
      deploymentconfig: "hola"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "hola"
  spec:
    port:
      targetPort: 8080
    to:
      kind: "Service"
      name: "hola"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "ola"
      hystrix.enabled: "true"
    name: "ola"
  spec:
    replicas: "1"
    selector:
      app: "ola"
      deploymentconfig: "ola"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "ola"
          deploymentconfig: "ola"
          hystrix.enabled: "true"
      spec:
        containers:
        - name: "ola"
          image: "docker.io/metmajer/msa-ola"
          env:
          - name: "AB_ENABLED"
            value: "jolokia"
          - name: "ZIPKIN_SERVER_URL"
            value: "http://zipkin-${OS_PROJECT}.${OS_MASTER_IP}.xip.io"
          ports:
          - containerPort: 8778
            protocol: "TCP"
          - containerPort: 9779
            protocol: "TCP"
          - containerPort: 8080
            protocol: "TCP"
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "ola"
      hystrix.enabled: "true"
    name: "ola"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    - name: "8778-tcp"
      port: 8778
      protocol: "TCP"
      targetPort: 8778
    - name: "9779-tcp"
      port: 9779
      protocol: "TCP"
      targetPort: 9779
    selector:
      app: "ola"
      deploymentconfig: "ola"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "ola"
  spec:
    port:
      targetPort: 8080
    to:
      kind: "Service"
      name: "ola"
parameters:
- name: "OS_PROJECT"
  description: "The name of the project"
  value: "OS_PROJECT"
  required: true
- name: "OS_MASTER_IP"
  description: "The IP address of your OpenShift cluster's master"
  value: "OS_MASTER_IP"
  required: true
- name: "OS_PUBLIC_HOSTNAME"
  description: "The public hostname of your OpenShift cluster's master"
  value: "OS_PUBLIC_HOSTNAME"
  required: true
