---
apiVersion: "v1"
kind: "Template"
metadata:
  name: "helloworld-redhatmsa-with-hawkular-apm"
  annotations:
    description: "The Red Hat HelloWorld MSA (Microservice Architecture) (with Hawkular APM)."
objects:
- apiVersion: "v1"
  kind: "ServiceAccount"
  metadata:
    name: "turbine"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "turbine-server"
    name: "turbine-server"
  spec:
    replicas: "1"
    selector:
      app: "turbine-server"
      deploymentconfig: "turbine-server"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "turbine-server"
          deploymentconfig: "turbine-server"
      spec:
        containers:
        - name: "turbine-server"
          image: "fabric8/turbine-server:1.0.28"
          env:
          - name: "KUBERNETES_NAMESPACE"
            valueFrom:
              fieldRef:
                fieldPath: "metadata.namespace"
          ports:
          - containerPort: 8080
            protocol: "TCP"
          resources: {}
        serviceAccountName: "turbine"
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "turbine-server"
    name: "turbine-server"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    selector:
      app: "turbine-server"
      deploymentconfig: "turbine-server"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "turbine-server"
  spec:
    port:
      targetPort: 8080
    to:
      kind: "Service"
      name: "turbine-server"
- apiVersion: "v1"
  kind: "ServiceAccount"
  metadata:
    name: "ribbon"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "hystrix-dashboard"
    name: "hystrix-dashboard"
  spec:
    replicas: "1"
    selector:
      app: "hystrix-dashboard"
      deploymentconfig: "hystrix-dashboard"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "hystrix-dashboard"
          deploymentconfig: "hystrix-dashboard"
      spec:
        containers:
        - name: "hystrix-dashboard"
          image: "fabric8/hystrix-dashboard:1.0.28"
          ports:
          - containerPort: 8080
            protocol: "TCP"
          resources: {}
        serviceAccountName: "turbine"
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "hystrix-dashboard"
    name: "hystrix-dashboard"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    selector:
      app: "hystrix-dashboard"
      deploymentconfig: "hystrix-dashboard"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "hystrix-dashboard"
  spec:
    port:
      targetPort: 8080
    to:
      kind: "Service"
      name: "hystrix-dashboard"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      project: "zipkin"
    name: "zipkin"
  spec:
    replicas: "1"
    selector:
      app: "zipkin"
      deploymentconfig: "zipkin"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "zipkin"
          deploymentconfig: "zipkin"
      spec:
        containers:
        - name: "zipkin"
          image: "openzipkin/zipkin:1.22"
          env:
          - name: "STORAGE_PORT_9042_TCP_ADDR"
            value: "zipkin-cassandra:9411"
          - name: "STORAGE_PORT_3306_TCP_ADDR"
            value: "zipkin-mysql:3306"
          - name: "STORAGE_TYPE"
            value: "mysql"
          - name: "TRANSPORT_TYPE"
            value: "http"
          - name: "KUBERNETES_NAMESPACE"
            valueFrom:
              fieldRef:
                fieldPath: "metadata.namespace"
          readinessProbe:
            httpGet:
              path: "/api/v1/services"
              port: 9411
            initialDelaySeconds: 5
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "zipkin"
    name: "zipkin"
  spec:
    ports:
    - port: 9411
      protocol: "TCP"
      targetPort: 9411
    selector:
      app: "zipkin"
      deploymentconfig: "zipkin"
- apiVersion: "v1"
  kind: "Route"
  metadata:
    labels:
      app: "zipkin"
    name: "zipkin"
  spec:
    port:
      targetPort: 9411
    to:
      kind: "Service"
      name: "zipkin"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "zipkin-mysql"
    name: "zipkin-mysql"
  spec:
    replicas: "1"
    selector:
      app: "zipkin-mysql"
      deploymentconfig: "zipkin-mysql"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "zipkin-mysql"
          deploymentconfig: "zipkin-mysql"
      spec:
        containers:
        - name: "zipkin-mysql"
          image: "gencatcloud/mysql-openshift:5.7"
          env:
          - name: "MYSQL_USER"
            value: "zipkin"
          - name: "MYSQL_PASSWORD"
            value: "zipkin"
          - name: "MYSQL_ROOT_PASSWORD"
            value: "zipkin"
          - name: "MYSQL_DATABASE"
            value: "zipkin"
          - name: "KUBERNETES_NAMESPACE"
            valueFrom:
              fieldRef:
                fieldPath: "metadata.namespace"
          readinessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: 3306
          volumeMounts:
          - mountPath: "/var/lib/mysql"
            name: "mysql-data"
          - mountPath: "/docker-entrypoint-initdb.d/"
            name: "mysql-init-script"
          - mountPath: "/etc/mysql/conf.d/"
            name: "mysql-confd"
        volumes:
        - name: "mysql-data"
          emptyDir: {}
        - name: "mysql-init-script"
          configMap:
            name: "zipkin-mysql-initdb"
        - name: "mysql-confd"
          configMap:
            name: "zipkin-mysql-cnf"
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "zipkin-mysql"
    name: "zipkin-mysql"
  spec:
    ports:
    - port: 3306
      protocol: "TCP"
      targetPort: 3306
    selector:
      app: "zipkin-mysql"
- apiVersion: "v1"
  kind: "PersistentVolumeClaim"
  metadata:
    labels:
      app: "zipkin-mysql"
    name: "mysql-data"
  spec:
    accessModes:
    - "ReadWriteOnce"
    resources:
      requests:
        storage: "100Mi"
    volumeName: "mysql-data"
- apiVersion: "v1"
  kind: "ConfigMap"
  metadata:
    labels:
      app: "zipkin-mysql"
    name: "zipkin-mysql-cnf"
  data:
    custom.cnf: "[mysqld]\nsql-mode=\"\"\n"
- apiVersion: "v1"
  kind: "ConfigMap"
  metadata:
    labels:
      app: "zipkin-mysql"
    name: "zipkin-mysql-initdb"
  data:
    init.sql: "
      CREATE TABLE IF NOT EXISTS zipkin_spans (
        `trace_id` BIGINT NOT NULL,
        `id` BIGINT NOT NULL,
        `name` VARCHAR(255) NOT NULL,
        `parent_id` BIGINT,
        `debug` BIT(1),
        `start_ts` BIGINT COMMENT 'Span.timestamp(): epoch micros used for endTs query and to implement TTL',
        `duration` BIGINT COMMENT 'Span.duration(): micros used for minDuration and maxDuration query'
      ) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;

      ALTER TABLE zipkin_spans ADD UNIQUE KEY(`trace_id`, `id`) COMMENT 'ignore insert on duplicate';
      ALTER TABLE zipkin_spans ADD INDEX(`trace_id`, `id`) COMMENT 'for joining with zipkin_annotations';
      ALTER TABLE zipkin_spans ADD INDEX(`trace_id`) COMMENT 'for getTracesByIds';
      ALTER TABLE zipkin_spans ADD INDEX(`name`) COMMENT 'for getTraces and getSpanNames';
      ALTER TABLE zipkin_spans ADD INDEX(`start_ts`) COMMENT 'for getTraces ordering and range';

      CREATE TABLE IF NOT EXISTS zipkin_annotations (
        `trace_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.trace_id',
        `span_id` BIGINT NOT NULL COMMENT 'coincides with zipkin_spans.id',
        `a_key` VARCHAR(255) NOT NULL COMMENT 'BinaryAnnotation.key or Annotation.value if type == -1',
        `a_value` BLOB COMMENT 'BinaryAnnotation.value(), which must be smaller than 64KB',
        `a_type` INT NOT NULL COMMENT 'BinaryAnnotation.type() or -1 if Annotation',
        `a_timestamp` BIGINT COMMENT 'Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp',
        `endpoint_ipv4` INT COMMENT 'Null when Binary/Annotation.endpoint is null',
        `endpoint_ipv6` BINARY(16) COMMENT 'Null when Binary/Annotation.endpoint is null, or no IPv6 address',
        `endpoint_port` SMALLINT COMMENT 'Null when Binary/Annotation.endpoint is null',
        `endpoint_service_name` VARCHAR(255) COMMENT 'Null when Binary/Annotation.endpoint is null'
      ) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;

      ALTER TABLE zipkin_annotations ADD UNIQUE KEY(`trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT 'Ignore insert on duplicate';
      ALTER TABLE zipkin_annotations ADD INDEX(`trace_id`, `span_id`) COMMENT 'for joining with zipkin_spans';
      ALTER TABLE zipkin_annotations ADD INDEX(`trace_id`) COMMENT 'for getTraces/ByIds';
      ALTER TABLE zipkin_annotations ADD INDEX(`endpoint_service_name`) COMMENT 'for getTraces and getServiceNames';
      ALTER TABLE zipkin_annotations ADD INDEX(`a_type`) COMMENT 'for getTraces';
      ALTER TABLE zipkin_annotations ADD INDEX(`a_key`) COMMENT 'for getTraces';

      CREATE TABLE IF NOT EXISTS zipkin_dependencies (
        `day` DATE NOT NULL,
        `parent` VARCHAR(255) NOT NULL,
        `child` VARCHAR(255) NOT NULL,
        `call_count` BIGINT
      ) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;

      ALTER TABLE zipkin_dependencies ADD UNIQUE KEY(`day`, `parent`, `child`);
      GRANT SELECT, INSERT, UPDATE, DELETE ON zipkin.* TO zipkin@'%' IDENTIFIED BY 'zipkin' WITH GRANT OPTION ;
      FLUSH PRIVILEGES;"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "frontend"
      hystrix.enabled: "true"
    name: "frontend"
  spec:
    replicas: "1"
    selector:
      app: "frontend"
      deploymentconfig: "frontend"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "frontend"
          hystrix.enabled: "true"
          deploymentconfig: "frontend"
      spec:
        containers:
        - name: "frontend"
          image: "metmajer/redhatmsa-frontend"
          env:
          - name: "OS_PROJECT"
            value: "${OS_PROJECT}"
          - name: "OS_SUBDOMAIN"
            value: "${OS_SUBDOMAIN}"
          - name: "ENABLE_HYSTRIX"
            value: "true"
          - name: "ENABLE_ZIPKIN"
            value: "true"
          ports:
          - containerPort: 8080
            protocol: "TCP"
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "frontend"
      hystrix.enabled: "true"
    name: "frontend"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    selector:
      app: "frontend"
      deploymentconfig: "frontend"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "frontend"
  spec:
    to:
      kind: "Service"
      name: "frontend"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "api-gateway"
      hystrix.enabled: "true"
    name: "api-gateway"
  spec:
    replicas: "1"
    selector:
      app: "api-gateway"
      deploymentconfig: "api-gateway"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "api-gateway"
          deploymentconfig: "api-gateway"
          hystrix.enabled: "true"
      spec:
        containers:
        - name: "api-gateway"
          image: "metmajer/redhatmsa-api-gateway"
          env:
          - name: "AB_ENABLED"
            value: "jolokia"
          - name: "ZIPKIN_SERVER_URL"
            value: "http://hawkular-apm-${OS_PROJECT}.${OS_SUBDOMAIN}"
          ports:
          - containerPort: 8080
            protocol: "TCP"
          - containerPort: 8778
            protocol: "TCP"
          - containerPort: 9779
            protocol: "TCP"
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "api-gateway"
      hystrix.enabled: "true"
    name: "api-gateway"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    - name: "8778-tcp"
      port: 8778
      protocol: "TCP"
      targetPort: 8778
    - name: "9779-tcp"
      port: 9779
      protocol: "TCP"
      targetPort: 9779
    selector:
      app: "api-gateway"
      deploymentconfig: "api-gateway"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "api-gateway"
  spec:
    port:
      targetPort: 8080
    to:
      kind: "Service"
      name: "api-gateway"
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "jolokia-api-gateway"
  spec:
    path: "/jolokia/"
    port:
      targetPort: 8778
    to:
      kind: "Service"
      name: "api-gateway"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "aloha"
      hystrix.enabled: "true"
    name: "aloha"
  spec:
    replicas: "1"
    selector:
      app: "aloha"
      deploymentconfig: "aloha"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "aloha"
          deploymentconfig: "aloha"
          hystrix.enabled: "true"
      spec:
        containers:
        - name: "aloha"
          image: "metmajer/redhatmsa-aloha:hawkular"
          env:
          - name: "AB_ENABLED"
            value: "jolokia"
          - name: "HAWKULAR_APM_ENABLED"
            value: "true"
          - name: "HAWKULAR_APM_URI"
            value: "http://hawkular-apm-${OS_PROJECT}.${OS_SUBDOMAIN}"
          - name: "HAWKULAR_APM_USERNAME"
            value: "${HAWKULAR_APM_ADMIN_USERNAME}"
          - name: "HAWKULAR_APM_PASSWORD"
            value: "${HAWKULAR_APM_ADMIN_PASSWORD}"
          - name: "ZIPKIN_SERVER_URL"
            value: "http://hawkular-apm-${OS_PROJECT}.${OS_SUBDOMAIN}"
          ports:
          - containerPort: 8080
            protocol: "TCP"
          - containerPort: 8778
            protocol: "TCP"
          - containerPort: 9779
            protocol: "TCP"
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "aloha"
      hystrix.enabled: "true"
    name: "aloha"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    - name: "8778-tcp"
      port: 8778
      protocol: "TCP"
      targetPort: 8778
    - name: "9779-tcp"
      port: 9779
      protocol: "TCP"
      targetPort: 9779
    selector:
      app: "aloha"
      deploymentconfig: "aloha"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "aloha"
  spec:
    port:
      targetPort: 8080
    to:
      kind: "Service"
      name: "aloha"
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "jolokia-aloha"
  spec:
    path: "/jolokia/"
    port:
      targetPort: 8778
    to:
      kind: "Service"
      name: "aloha"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "bonjour"
      hystrix.enabled: "true"
    name: "bonjour"
  spec:
    replicas: "1"
    selector:
      app: "bonjour"
      deploymentconfig: "bonjour"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "bonjour"
          deploymentconfig: "bonjour"
          hystrix.enabled: "true"
      spec:
        containers:
        - name: "bonjour"
          image: "metmajer/redhatmsa-bonjour"
          env:
          - name: "ZIPKIN_SERVER_URL"
            value: "http://hawkular-apm-${OS_PROJECT}.${OS_SUBDOMAIN}"
          ports:
          - containerPort: 8080
            protocol: "TCP"
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "bonjour"
      hystrix.enabled: "true"
    name: "bonjour"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    selector:
      app: "bonjour"
      deploymentconfig: "bonjour"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "bonjour"
  spec:
    to:
      kind: "Service"
      name: "bonjour"
- apiVersion: v1
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "hola"
      hystrix.enabled: "true"
    name: "hola"
  spec:
    replicas: "1"
    selector:
      app: "hola"
      deploymentconfig: "hola"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "hola"
          deploymentconfig: "hola"
          hystrix.enabled: "true"
      spec:
        containers:
        - name: "hola"
          image: "metmajer/redhatmsa-hola"
          env:
          - name: "AB_ENABLED"
            value: "jolokia"
          - name: "ZIPKIN_SERVER_URL"
            value: "http://hawkular-apm-${OS_PROJECT}.${OS_SUBDOMAIN}"
          ports:
          - containerPort: 8080
            protocol: "TCP"
          - containerPort: 8778
            protocol: "TCP"
          - containerPort: 9779
            protocol: "TCP"
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "hola"
      hystrix.enabled: "true"
    name: "hola"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    - name: "8778-tcp"
      port: 8778
      protocol: "TCP"
      targetPort: 8778
    - name: "9779-tcp"
      port: 9779
      protocol: "TCP"
      targetPort: 9779
    selector:
      app: "hola"
      deploymentconfig: "hola"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "hola"
  spec:
    port:
      targetPort: 8080
    to:
      kind: "Service"
      name: "hola"
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "jolokia-hola"
  spec:
    path: "/jolokia/"
    port:
      targetPort: 8778
    to:
      kind: "Service"
      name: "hola"
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "ola"
      hystrix.enabled: "true"
    name: "ola"
  spec:
    replicas: "1"
    selector:
      app: "ola"
      deploymentconfig: "ola"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "ola"
          deploymentconfig: "ola"
          hystrix.enabled: "true"
      spec:
        containers:
        - name: "ola"
          image: "metmajer/redhatmsa-ola"
          env:
          - name: "AB_ENABLED"
            value: "jolokia"
          - name: "ZIPKIN_SERVER_URL"
            value: "http://hawkular-apm-${OS_PROJECT}.${OS_SUBDOMAIN}"
          ports:
          - containerPort: 8080
            protocol: "TCP"
          - containerPort: 8778
            protocol: "TCP"
          - containerPort: 9779
            protocol: "TCP"
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "ola"
      hystrix.enabled: "true"
    name: "ola"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    - name: "8778-tcp"
      port: 8778
      protocol: "TCP"
      targetPort: 8778
    - name: "9779-tcp"
      port: 9779
      protocol: "TCP"
      targetPort: 9779
    selector:
      app: "ola"
      deploymentconfig: "ola"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "ola"
  spec:
    port:
      targetPort: 8080
    to:
      kind: "Service"
      name: "ola"
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "jolokia-ola"
  spec:
    path: "/jolokia/"
    port:
      targetPort: 8778
    to:
      kind: "Service"
      name: "ola"

- apiVersion: v1
  kind: Route
  metadata:
    creationTimestamp: null
    name: ${HAWKULAR_APM_SERVICE_NAME}
  spec:
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: edge
    to:
      kind: Service
      name: ${HAWKULAR_APM_SERVICE_NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: ${HAWKULAR_APM_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${HAWKULAR_APM_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: ${HAWKULAR_APM_SERVICE_NAME}
      spec:
        containers:
        - capabilities: {}
          env:
          - name: HAWKULAR_APM_ADMIN_USERNAME
            value: ${HAWKULAR_APM_ADMIN_USERNAME}
          - name: HAWKULAR_APM_ADMIN_PASSWORD
            value: ${HAWKULAR_APM_ADMIN_PASSWORD}
          - name: HAWKULAR_APM_ELASTICSEARCH_HOSTS
            value: ${HAWKULAR_APM_SERVICE_NAME}-es:9300
          - name: HAWKULAR_APM_ELASTICSEARCH_CLUSTER
            value: ${HAWKULAR_APM_SERVICE_NAME}-es-cluster
          image: jboss/hawkular-apm-server
          imagePullPolicy: IfNotPresent
          name: ${HAWKULAR_APM_SERVICE_NAME}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          readinessProbe:
            timeoutSeconds: 10
            initialDelaySeconds: 40
            httpGet:
              path: "/hawkular/apm/status"
              port: 8080
          livenessProbe:
            timeoutSeconds: 10
            initialDelaySeconds: 40
            httpGet:
              path: "/hawkular/apm/status"
              port: 8080
          resources:
            requests:
              memory: 1024Mi
              cpu: 2000m
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        serviceAccountName: ${HAWKULAR_APM_SERVICE_NAME}
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    name: ${HAWKULAR_APM_SERVICE_NAME}-es
  spec:
    replicas: 1
    selector:
      name: ${HAWKULAR_APM_SERVICE_NAME}-es
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: ${HAWKULAR_APM_SERVICE_NAME}-es
      spec:
        containers:
        - capabilities: {}
          env:
          - name: CLUSTER_NAME
            value: ${HAWKULAR_APM_SERVICE_NAME}-es-cluster
          image: jpkroehling/elasticsearch
          imagePullPolicy: IfNotPresent
          name: ${HAWKULAR_APM_SERVICE_NAME}-es
          terminationMessagePath: /dev/termination-log
          readinessProbe:
            timeoutSeconds: 5
            initialDelaySeconds: 5
            httpGet:
              path: "/"
              port: 9200
          livenessProbe:
            timeoutSeconds: 5
            initialDelaySeconds: 5
            httpGet:
              path: "/"
              port: 9200
          resources:
            requests:
              memory: 256Mi
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        serviceAccountName: ${HAWKULAR_APM_SERVICE_NAME}-es
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.hawkular-apm: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${HAWKULAR_APM_SERVICE_NAME}"}}'
    name: ${HAWKULAR_APM_SERVICE_NAME}
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${HAWKULAR_APM_SERVICE_NAME}-es
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.hawkular-apm-es: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${HAWKULAR_APM_SERVICE_NAME}-es"}}'
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: ${HAWKULAR_APM_SERVICE_NAME}
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"${HAWKULAR_APM_SERVICE_NAME}-es","namespace":"","kind":"Service"}]'
  spec:
    ports:
    - name: web
      nodePort: 0
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      name: ${HAWKULAR_APM_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${HAWKULAR_APM_SERVICE_NAME}-es
    creationTimestamp: null
    name: ${HAWKULAR_APM_SERVICE_NAME}-es
  spec:
    ports:
    - name: rest-api
      port: 9200
      protocol: TCP
      targetPort: 9200
    - name: native
      port: 9300
      protocol: TCP
      targetPort: 9300
    selector:
      name: ${HAWKULAR_APM_SERVICE_NAME}-es
    sessionAffinity: None
    type: ClusterIP
parameters:
- description: The name of the Hawkular APM Service.
  displayName: Hawkular APM Service Name
  name: HAWKULAR_APM_SERVICE_NAME
  required: true
  value: hawkular-apm
- description: The username for the user with administrative privileges.
  displayName: Administrator's username
  name: HAWKULAR_APM_ADMIN_USERNAME
  required: true
  value: admin
- description: The password for the user with administrative privileges.
  displayName: Administrator's password
  from: '[a-zA-Z0-9]{23}'
  generate: expression
  name: HAWKULAR_APM_ADMIN_PASSWORD
  value: "password"
- name: "OS_PROJECT"
  description: "The name of the project."
  value: "OS_PROJECT"
  required: true
- name: "OS_SUBDOMAIN"
  description: "The OpenShift master's domain for server routes."
  value: "OS_SUBDOMAIN"
  required: true
